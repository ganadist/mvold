#!/usr/bin/env python

from gi.repository import GLib
import sys, os, socket

import volume

SOCKET_PATH = '/tmp/mvold'

NETLINK_KOBJECT_EVENT = getattr(socket, 'NETLINK_KOBJECT_EVENT', 15)

IGNORE_BLOCK_DEVICES_PREFIX = ('loop', 'ram')

class Daemon:
	def __init__(self):
		self.s = socket.socket(socket.AF_UNIX)
		self.nl = socket.socket(socket.AF_NETLINK,
				socket.SOCK_RAW, NETLINK_KOBJECT_EVENT)

		if os.access(SOCKET_PATH, os.R_OK):
			os.remove(SOCKET_PATH)
		self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

		self.s.bind((SOCKET_PATH))
		os.chmod(SOCKET_PATH, 0666)
		self.nl.bind((socket.AF_NETLINK, 1))
		GLib.io_add_watch(self.nl, GLib.IOCondition.IN, self.handle_uevent)
		GLib.io_add_watch(self.s, GLib.IOCondition.IN, self.handle_socket)

		self.disks = {}
		self.volumes = {}

	def handle_uevent(self, nl, cond, *args):
		buf = nl.recv(4086).split('\0')
		main = buf[0]
		event = {}
		for b in buf[1:-1]:
			k, v = b.split('=')
			event[k] = v

		if event['SUBSYSTEM'] == 'block':
			self.handle_block(event)
		return True
	
	def handle_block(self, event):
		devtype = event['DEVTYPE']
		if devtype == 'disk':
			self.handle_disk(event)
		elif devtype == 'partition':
			self.handle_partition(event)
		else:
			pass
	
	def handle_disk(self, event):
		action = event['ACTION']
		if action == 'add':
			self.add_disk(event)
		elif action == 'remove':
			self.remove_disk(event)
		else:
			pass
	
	def add_disk(self, event):
		d = volume.Disk(event)
		self.disks[event['DEVNAME']] = d
	
	def remove_disk(self, event):
		dev = event['DEVNAME']
		if dev in self.disks:
			disk = self.disks.pop(dev)
			disk.destroy()

	def handle_partition(self, event):
		action = event['ACTION']
		if action == 'add':
			self.add_partition(event)
		elif action == 'remove':
			self.remove_partition(event)
		else:
			pass

	def add_partition(self, event):
		v = volume.Volume(event)
		self.volumes[event['DEVNAME']] = v

	def remove_partition(self, event):
		dev = event['DEVNAME']
		if dev in self.volumes:
			volume = self.volumes.pop(dev)
			volume.destroy()

	def handle_socket(self, sock, cond, *args):
		c = sock.accept()
		cmd = c.recv(4096)
		resp = self.handle_cmd(cmd)
		c.send(resp)
		return True

	def handle_cmd(self, cmd):
		return ''
	
	def run_coldplug(self):
		BLOCK_SYSFS = '/sys/block/'

if __name__ == '__main__':
	if os.getuid() != 0:
		print 'switch root permission'
		sudo = 'sudo'
		cmd = [sudo, sys.executable] + sys.argv
		os.execvp(sudo, cmd)
	
	os.makedirs('/dev/block/mvold/')
	d = Daemon()
	d.run_coldplug()
	
	GLib.MainLoop().run()
